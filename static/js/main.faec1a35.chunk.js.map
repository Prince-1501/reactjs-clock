{"version":3,"sources":["App.module.css","bg-image.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","showDay","showDayHandler","day","setState","date","Date","time","toLocaleTimeString","showDetail","message","this","toLocaleDateString","className","classes","h1","src","Logo","width","height","showTime","btn","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,GAAK,gBAAgB,KAAO,kBAAkB,IAAM,iBAAiB,SAAW,wB,oBCDzHD,EAAOC,QAAU,IAA0B,sC,uNC6C5BC,G,kNArCbC,MAAO,CACLC,SAAU,G,EAGZC,eAAiB,WACf,IAAMC,EAAM,EAAKH,MAAMC,QACvB,EAAKG,SAAS,CACZH,SAAUE,K,uDAKZ,IAAIE,EAAO,IAAIC,KACXC,EAAOF,EAAKG,qBAEZC,GAAa,EACbC,EAAU,YACXC,KAAKX,MAAMC,UAEZQ,EADYJ,EAAKO,qBAEjBF,EAAU,eAGZ,OACE,yBAAKG,UAAWC,IAAQf,KACpB,wBAAIc,UAAWC,IAAQC,IAAvB,sBACA,yBAAMC,IAAKC,IAAMC,MAAM,MAAMC,OAAO,QACpC,yBAAKN,UAAWC,IAAQP,MACtB,yBAAKM,UAAWC,IAAQM,UAAWb,GACnC,yBAAKM,UAAWC,IAAQM,UAAWX,IAErC,4BAAQI,UAAWC,IAAQO,IAAKC,QAASX,KAAKT,gBAA9C,IAAgEQ,EAAhE,U,GAjCQa,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/B,c","file":"static/js/main.faec1a35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"h1\":\"App_h1__26v8a\",\"time\":\"App_time__Mwxyj\",\"btn\":\"App_btn__34jjX\",\"showTime\":\"App_showTime__kepI3\"};","module.exports = __webpack_public_path__ + \"static/media/bg-image.d94aee2b.svg\";","import React, {Component} from 'react';\nimport classes from './App.module.css';\nimport Logo from './bg-image.svg';\nimport grid from './assets/css/Grid.css';\n\n\nclass App extends Component {\n\n  state= {\n    showDay : false\n  }\n\n  showDayHandler = () =>{\n    const day = this.state.showDay;\n    this.setState({\n      showDay: !day\n    });\n  }\n\n  render(){\n    let date = new Date();\n    let time = date.toLocaleTimeString();\n\n    let showDetail = false;\n    let message = \"Show Date\";\n    if(this.state.showDay){\n      const day = date.toLocaleDateString();\n      showDetail = (day);\n      message = \"Remove Date\";\n    }\n\n    return (\n      <div className={classes.App}>\n          <h1 className={classes.h1}>Your Time is here </h1>\n          <img  src={Logo} width=\"500\" height=\"600\"/>\n          <div className={classes.time}>\n            <div className={classes.showTime}>{time}</div>\n            <div className={classes.showTime}>{showDetail}</div>\n          </div>\n          <button className={classes.btn} onClick={this.showDayHandler}> {message} </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}